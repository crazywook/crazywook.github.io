---
layout: single
title: "도커 컨테이너 내부에서 외부로 통신하기"
author: Sungwook Kim
category: design
tag: [추상화]
---
추상화는 항상 오랜 숙제다. 무턱대고 추상화 하던 시절이 있었는데 경험이 쌓이기 전까지는 함부로 추상화를 하지는 않고 있다.

> 알림 게시판 등록하기  
    1. 필요한 데이타를 찾는다.  
    2. 알림메세지를 보낸다.

알림 종류는 재고 부족부터 입고 알림까지 매우 다양하다. 누가 봐도 단순한 패턴이고 쉽게 추상화 가능한 절차다.
type만 정해주면 깔끔하게 마무리가 될텐데 순수 자바스크립트를 쓰니 이런 간단한 것도 설득력을 가지기 힘들어진다.
거기다 class를 안쓰고 factory function 형태로 만드니 더 추적하기 어려워진다.

```javascript
function senderFactory ({ findData, notify }) {
  return () => {
    const data = findData()
    if (!data) {
      console.log('데이터가 없습니다.')
      return
    }
    notify(data)
  }
}
```
'데이터가 없습니다.' 라는 메세지를 확인하고 왜 그렇게 되었는가를 디버깅 하려고 하는데
참조를 타고 들어가니 `findData()` 밖에 안보인다.
그리고 추상함수의 폴더도 다른 곳에 있을 확률이 높기 때문에 함수를 생성한 곳을 찾아가야한다.
빠르게 디버깅하기 어려워 지는 순간이다.
class로 상속을 구현했다면

```javascript
class Sender {
  findAndNotify () {
    const data = this.findData()
    this.notify(data)
  }
}
```
```javascript
class OutOfStockSender extends Sender {

  findData () {

  }

  notify () {

  }
}
```
